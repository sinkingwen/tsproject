{"version":3,"file":"poker-enum.js","sourceRoot":"","sources":["../poker-enum.ts"],"names":[],"mappings":";AAQA,IAAK,KAKJ;AALD,WAAK,KAAK;IACR,yBAAW,CAAA;IACX,yBAAW,CAAA;IACX,wBAAU,CAAA;IACV,2BAAa,CAAA;AACf,CAAC,EALI,KAAK,KAAL,KAAK,QAKT;AACD,IAAK,IAcJ;AAdD,WAAK,IAAI;IACP,eAAO,CAAA;IACP,iBAAS,CAAA;IACT,mBAAW,CAAA;IACX,kBAAU,CAAA;IACV,kBAAU,CAAA;IACV,iBAAS,CAAA;IACT,mBAAW,CAAA;IACX,mBAAW,CAAA;IACX,kBAAU,CAAA;IACV,kBAAU,CAAA;IACV,oBAAY,CAAA;IACZ,oBAAY,CAAA;IACZ,sBAAc,CAAA;AAChB,CAAC,EAdI,IAAI,KAAJ,IAAI,QAcR;AAED,SAAS,UAAU;IACjB,MAAM,IAAI,GAAU,EAAE,CAAC;IAEvB,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAClC,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAEpC,KAAK,MAAM,CAAC,IAAI,KAAK,EAAE,CAAC;QACpB,KAAK,MAAM,CAAC,IAAI,MAAM,EAAG,CAAC;YACxB,IAAI,CAAC,IAAI,CAAC;gBACR,KAAK,EAAE,CAAC;gBACR,IAAI,EAAE,CAAC;aACR,CAAC,CAAA;QACJ,CAAC;IACL,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,SAAS,CAAC,IAAU;IAC3B,IAAI,MAAM,GAAG,IAAI,CAAC;IAClB,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;QACvB,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;QACjC,MAAM,IAAI,GAAG,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,KAAK,CAAC,EAAE,CAAC;YAClB,MAAM,IAAI,IAAI,CAAC;QACjB,CAAC;IACH,CAAC,CAAC,CAAA;IACF,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACtB,CAAC;AAED,MAAM,IAAI,GAAG,UAAU,EAAE,CAAC;AAC1B,SAAS,CAAC,IAAI,CAAC,CAAC","sourcesContent":[" \n// 枚举改写扑克牌\ntype Deck = Card[];\ntype Card = {\n  color: Color,\n  mark: Mark,\n}\n  \nenum Color {\n  heart = \"♥\",\n  spade = \"♠\",\n  club = \"♣\",\n  diamond = \"♦\",\n}\nenum Mark {\n  A = \"A\",\n  two = \"2\",\n  three = \"3\",\n  four = \"4\",\n  five = \"5\",\n  six = \"6\",\n  seven = \"7\",\n  eight = \"8\",\n  nine = \"9\",\n  ten = \"10\",\n  eleven = \"J\",\n  twelve = \"Q\",\n  thirteen = \"K\",\n}\n\nfunction createDeck (): Deck {\n  const deck : Deck = [];\n\n  const marks = Object.values(Mark);\n  const colors = Object.values(Color);\n\n  for (const m of marks) {\n      for (const c of colors ) {\n        deck.push({\n          color: c,\n          mark: m\n        })\n      }\n  }\n\n  return deck;\n}\n\nfunction printDeck(deck: Deck) {\n  let result = '\\r';\n  deck.forEach((card, i) => {\n    let str = card.color + card.mark;\n    result += str + '\\t';\n    if ((i+1)%6 === 0) {\n      result += '\\n';\n    }\n  })\n  console.log(result);\n}\n\nconst deck = createDeck();\nprintDeck(deck);"]}